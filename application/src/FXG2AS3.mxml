<?xml version="1.0" encoding="utf-8"?>
<s:WindowedApplication xmlns:fx="http://ns.adobe.com/mxml/2009" 
					   xmlns:s="library://ns.adobe.com/flex/spark" 
					   xmlns:mx="library://ns.adobe.com/flex/mx"
					   showStatusBar="false" xmlns:containers="com.iwobanas.containers.*"
					   width="800" height="600"
					   minWidth="600" minHeight="200" 
					   backgroundColor="0xCCCCCC"
					   title="FXG2AS3">
	<s:layout>
		<s:VerticalLayout paddingTop="5" paddingLeft="5" paddingRight="5" paddingBottom="5"/>
	</s:layout>
	<s:Group width="100%">
		<s:Button label="Load FXG File" click="pickFXGFile();" fontSize="24" chromeColor="0x99CC99" left="0"
				  toolTip="Select an FXG file from the local filesystem. This app will read that file and produce equivalent Actionscript 3 based on its contents."/>
		<s:Group right="0">
			<s:layout>
				<s:HorizontalLayout verticalAlign="middle"/>
			</s:layout>
			<s:CheckBox id="targetFlexThree" label="Target Flex 3" selected="true" toolTip="{'The output Actionscript will try to be compatible with ' + (targetFlexThree.selected ? 'the Flex 3 SDK and NOT use the Text Layout Framework classes' : 'the Flex 4 SDK')}"/>
			<s:CheckBox id="useVectorNotation" label="Use Vector Notation" selected="true" toolTip="{'Actionscript drawing code will ' + (useVectorNotation.selected ? 'use the Graphics.drawPath method and Vector class introduced in Flash Player 10' : 'try to be compatible with Flash Player 9 and use the Graphics.moveTo, Graphics.curveTo, and Graphics.lineTo methods.' )}"/>
			<s:CheckBox id="inspectEmbeddedImages" label="Inspect Embedded Images" selected="true" toolTip="{'FXG2AS3 will ' + (inspectEmbeddedImages.selected ? 'attempt to find bitmap images described in the FXG on the local filesystem and determine their dimensions' : 'generate generic bitmap drawing code without looking for the image files described in the FXG')}"/>
			<s:NumericStepper id="numericPrecision" stepSize="1" value="5" minimum="1" maximum="20" />
			<s:Label text="Numeric Precision" />
		</s:Group>
	</s:Group>
	<s:Group width="100%" height="100%" id="panelsHolder">
		<s:layout>
			<s:HorizontalLayout />
		</s:layout>
		<containers:CollapsiblePanel skinClass="com.iwobanas.skins.CollapsiblePanelSkin" title="Source FXG"
									 height="100%" id="inputPanel" toolTip="{'Contains the source FXG XML used to generate the output actionscript.  Press the ' + (inputPanel.collapsed ? 'blue square button to expand' : 'white square button to collapse')}">
			<containers:layout>
				<s:VerticalLayout  paddingBottom="5"/>
			</containers:layout>
			<s:TextArea id="inputFXG" width="{panelsHolder.width*0.5}" height="100%"/>
			<s:HGroup width="100%" horizontalAlign="center">
				<s:Button label="Convert FXG to Actionscript" click="manualConversionClickHandler(event);"  chromeColor="0x9999CC"
						  fontSize="18"
						  toolTip="Convert the current contents of the 'Source FXG' text area into Actionscript."/>
			</s:HGroup>
			
		</containers:CollapsiblePanel>
		<s:Panel title="Output Actionscript 3" height="100%" width="100%" id="outputPanel"
				 toolTip="Actionscript generated by parsing the source FXG will appear here.  Copy this code into your own separate Actionscript-based projects.">
			<s:TextArea width="100%" height="100%" id="as3Holder"/>
		</s:Panel>
	</s:Group>
	
	<fx:Script>
		<![CDATA[
			import com.iwobanas.skins.CollapsiblePanelSkin;
			
			import fxg2as3.FXGConverter;
			import fxg2as3.ISourceBitmapUser;
			import fxg2as3.displayObjects.ExpressiveDisplayObject;
			
			import mx.controls.Alert;
			
			private var fxgFile:File;
			private var rootExpressiveDisplayObject:ExpressiveDisplayObject;
			private var sourceBitmapUsers:Vector.<ISourceBitmapUser>;
			private var sourceBitmapUsersByLoader:Dictionary;
			private var incompleteLoaders:Vector.<Loader>;
			private var completeLoaders:Vector.<Loader>;
			
			private function pickFXGFile():void 
			{
				fxgFile = File.documentsDirectory;
				fxgFile.addEventListener(Event.SELECT, fxgFileSelectionDoneHandler);
				fxgFile.addEventListener(Event.CANCEL, fxgFileSelectionCanceledHandler);
				fxgFile.browseForOpen("FXG", [new FileFilter("FXG", "*.fxg")]);
			}
			
			private function fxgFileSelectionCanceledHandler(event:Event):void 
			{
				fxgFile.removeEventListener(Event.SELECT, fxgFileSelectionDoneHandler);
				fxgFile.removeEventListener(Event.CANCEL, fxgFileSelectionCanceledHandler);
				fxgFile = null;
			}
			
			private function fxgFileSelectionDoneHandler(event:Event):void
			{
				fxgFile.removeEventListener(Event.SELECT, fxgFileSelectionDoneHandler);
				fxgFile.removeEventListener(Event.CANCEL, fxgFileSelectionCanceledHandler);
				
				var fileStream:FileStream = new FileStream();
				fileStream.open(fxgFile, FileMode.READ);
				var data:String = fileStream.readUTFBytes(fileStream.bytesAvailable);
				fileStream.close();
				inputFXG.text = data;
				convertDataStringToAS3(data);
			}
			
			private function manualConversionClickHandler(event:MouseEvent):void
			{
				if (inputFXG && inputFXG.text)
				{
					convertDataStringToAS3(inputFXG.text);
				}
			}
			
			private function convertDataStringToAS3(pSourceProbablyFXG:String):void
			{
				clearData();
				var xml:XML;
				var xmlSettings:Object = XML.settings();
				try
				{
					XML.ignoreWhitespace = false;
					xml = XML(pSourceProbablyFXG);
				}
				catch (typeError:TypeError)
				{
					// Whoops
					var b:Boolean = true;
				}
				XML.setSettings(xmlSettings);
				
				if (!xml)
				{
					Alert.show("Source FXG selected could not be parsed into valid XML.");
					return;
				}
				
				rootExpressiveDisplayObject = FXGConverter.generateExpressiveDisplayObjectFromFXG(xml);
				sourceBitmapUsers = FXGConverter.findISourceBitmapUsers(rootExpressiveDisplayObject);
				if (rootExpressiveDisplayObject)
				{
					if (sourceBitmapUsers && sourceBitmapUsers.length > 0 && inspectEmbeddedImages.selected)
					{
						attemptToLoadImages(); // Try to dig up size information about the related embedded images to help in positioning/scaling bitmap fills 
					}
					else
					{
						as3Holder.text = FXGConverter.generateAS3FromExpressiveDisplayObject(rootExpressiveDisplayObject, targetFlexThree.selected, useVectorNotation.selected, int(numericPrecision.value));
						clearData();
					}
				}
			}
			
			private function attemptToLoadImages():void
			{
				if (!sourceBitmapUsers)
				{
					return;
				}
				
				var sourceFXGDirectory:File = fxgFile ? fxgFile.parent : null;
				
				for each (var sourceBitmapUser:ISourceBitmapUser in sourceBitmapUsers)
				{
					if (sourceBitmapUser.referenceBitmapData)
					{
						continue;
					}
					var loader:Loader;
					if (sourceFXGDirectory)
					{
						var fileRelativeToSourceFXG:File = sourceFXGDirectory.resolvePath(sourceBitmapUser.bitmapSourcePath);
						if (fileRelativeToSourceFXG && fileRelativeToSourceFXG.exists)
						{
							loader = new Loader();
							loader.contentLoaderInfo.addEventListener(Event.COMPLETE, imageLoaderCompleteHandler);
							loader.load(new URLRequest(fileRelativeToSourceFXG.url));
							incompleteLoaders.push(loader);
							sourceBitmapUsersByLoader[loader] = sourceBitmapUser;
							continue;
						}
					}
				}
				
				if (incompleteLoaders.length == 0)
				{
					as3Holder.text = FXGConverter.generateAS3FromExpressiveDisplayObject(rootExpressiveDisplayObject, targetFlexThree.selected, useVectorNotation.selected, int(numericPrecision.value));
					clearData();
				}
			}
			
			private function imageLoaderCompleteHandler(event:Event):void
			{
				var loaderInfo:LoaderInfo = event.target as LoaderInfo;
				loaderInfo.removeEventListener(Event.COMPLETE, imageLoaderCompleteHandler);
				var loader:Loader = loaderInfo.loader;
				if (incompleteLoaders.indexOf(loader) >= 0)
				{
					incompleteLoaders.splice(incompleteLoaders.indexOf(loader), 1);
				}
				completeLoaders.push(loader);
				var relatedSourceBitmapUser:ISourceBitmapUser = sourceBitmapUsersByLoader[loader];
				if (relatedSourceBitmapUser)
				{
					relatedSourceBitmapUser.referenceBitmapData = Bitmap(loader.content).bitmapData;
				}
				
				if (incompleteLoaders.length == 0)
				{
					as3Holder.text = FXGConverter.generateAS3FromExpressiveDisplayObject(rootExpressiveDisplayObject, targetFlexThree.selected, useVectorNotation.selected, int(numericPrecision.value));
					clearData();
				}
			}
			
			private function clearData():void
			{
				rootExpressiveDisplayObject = null;
				if (incompleteLoaders)
				{
					for each (var loader:Loader in incompleteLoaders)
					{
						loader.contentLoaderInfo.removeEventListener(Event.COMPLETE, imageLoaderCompleteHandler);
						loader.unloadAndStop();
					}
				}
				if (completeLoaders)
				{
					for each (var completeLoader:Loader in completeLoaders)
					{
						completeLoader.unloadAndStop();
					}
				}
				
				incompleteLoaders = new Vector.<Loader>();
				completeLoaders = new Vector.<Loader>();
				sourceBitmapUsersByLoader = new Dictionary();
			}
		]]>
	</fx:Script>
</s:WindowedApplication>
